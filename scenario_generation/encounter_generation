{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scenarios = pd.read_csv(r'C:/Users/ralvi/Downloads/scenarios.csv')\n",
    "scenarios.columns = scenarios.columns.str.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "H=600;\n",
    "t = 30;\n",
    "\n",
    "speed1 = 15;\n",
    "speed2 = 30;\n",
    "\n",
    "alpha_min = 0;\n",
    "alpha_step = 10;\n",
    "alpha_max = 180;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = 8\n",
    "t1 = 7\n",
    "t2 = t - t1\n",
    "theta = 1.6\n",
    "V = 20\n",
    "omega = theta/t1\n",
    "R = V/omega\n",
    "RN = 4\n",
    "t_delay= 2 \n",
    "\n",
    "Rt = RN + V*(t2 + t_delay) + R\n",
    "\n",
    "l = ((-2*R**2) - (2*V*R*t2) - (V**2*t2**2) + (V**2*t**2)) / (2*V*t - 2*R)\n",
    "\n",
    "D = Rt + l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "t_cpa = 15\n",
    "tr = {1:90, 1.5:60, 2:45, 3:30, 4.5:20, 6:15}\n",
    "altitude = 50\n",
    "climb_rate = 0\n",
    "\n",
    "for t in [4.0,6.0,8.0]:\n",
    "    for V in [10,15,20]:\n",
    "        D = []\n",
    "        for t1 in [1,1.5,2,3,4.5,6]:\n",
    "            omega = theta/t1\n",
    "            R = V/omega\n",
    "            t2 = t - t1\n",
    "            if t2 >= 1:\n",
    "                Rt = RN + V*t2 + R\n",
    "                D.append(Rt+l)\n",
    "                dist = Rt + l\n",
    "                dist = 5 * round(dist/5)\n",
    "                if V == 10:\n",
    "                    V2 = 20\n",
    "                else:\n",
    "                    V2 = 10\n",
    "                for alpha in [0,90,180]:\n",
    "                    if alpha ==180 and (V == 15 or V == 20):\n",
    "                        continue\n",
    "                    b, r, h = calc_scenario_params(alpha, dist, V, V2, t_cpa)\n",
    "                    \n",
    "                    n = 'St'+str(int(t))+'tr'+str(tr[t1])+'h'+str(alpha)+'v'+str(V)\n",
    "                    i = scenarios.index[scenarios['Scenario Name'] == n].tolist()[0]\n",
    "                    scenarios.loc[i,'Param:DET_1_WCV_DTHR'] = dist\n",
    "                    scenarios.loc[i, 'Traffic'] = str([1,r,b,altitude,V2,h,climb_rate])\n",
    "                                   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "scenarios.to_csv(r'C:/Users/ralvi/Downloads/new_scenarios.csv', index=False)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def asin(sina, cosa):\n",
    "    a = math.asin(sina);\n",
    "    #print(\"sin, cos: \" + str(sina) + \", \" + str(cosa) )\n",
    "    \n",
    "    if(abs(sina) < 1e-6):\n",
    "        if(cosa < 0):\n",
    "            a = math.pi;\n",
    "    elif(sina > 0):\n",
    "        if(cosa < 0):\n",
    "            a = math.pi - a;\n",
    "    elif(cosa < 0):\n",
    "        a = -math.pi + a;\n",
    "    \n",
    "    return a;\n",
    "\n",
    "def calc_scenario_params(alpha, H, speed1, speed2, t):\n",
    "    alpha = alpha*math.pi / 180;\n",
    "    \n",
    "    h = alpha + math.pi;\n",
    "    if(h > math.pi):\n",
    "        h -= 2*math.pi;\n",
    "    #print(h*180/math.pi);\n",
    "    \n",
    "    v1x = speed1;\n",
    "    \n",
    "    v2x = speed2 * math.cos(h);\n",
    "    v2y = speed2 * math.sin(h);\n",
    "    \n",
    "    x02 = H*math.cos(alpha) - (v2x-v1x)*t;\n",
    "    y02 = H*math.sin(alpha) - v2y*t;\n",
    "    #print(\"x02, y02: \" + str(x02) + \", \" + str(y02))\n",
    "    d = math.sqrt(x02**2 + y02**2);\n",
    "\n",
    "    sinb = round(y02/d, 6);\n",
    "    cosb = round(x02/d, 6);\n",
    "    b = asin(sinb, cosb);\n",
    "    #b = math.acos(cosb);\n",
    "    \n",
    "    '''\n",
    "    x1 = v1x*t;\n",
    "    x2 = x02 + v2x*t;\n",
    "    y2 = y02 + v2y*t;\n",
    "    print(\"ac2 = [\" + str(x02) + \", \" + str(y02) + \", 0, 0;\\n\"\n",
    "         + str(x2) + \", \" + str(y2) + \", 0, \" + str(t) + \"];\");\n",
    "    '''\n",
    "    \n",
    "    # nqs do bearing ne radian, fshi kete rreshtin\n",
    "    b = b/math.pi * 180;\n",
    "    h = h/math.pi * 180;\n",
    "    #print(str(b) + \", \" + str(h));\n",
    "    #print(h);\n",
    "    \n",
    "    bearing = -b + 90;\n",
    "    heading = -h + 90;\n",
    "    #print(str(bearing) + \", \" + str(heading));\n",
    "    r = d;\n",
    "    \n",
    "    return [bearing, r, heading];\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "bearings = []\n",
    "ranges = []\n",
    "alpha = 180\n",
    "t_cpa = 15\n",
    "speed1 = 10\n",
    "speed2 = 20\n",
    "H = [85, 80, 75]\n",
    "altitude = 50\n",
    "climb_rate = 0\n",
    "text_file = open(\"intruders.txt\", \"w\")\n",
    "string_result = []\n",
    "string_result.append(\"# id, range [m], bearing [deg], altitude [m], speed [m/s], heading [deg], climb rate [m/s]\\n\");\n",
    "n = text_file.write(string_result[0])\n",
    "i = 1\n",
    "for dist in H:\n",
    "    b, r, h = calc_scenario_params(alpha, dist, speed1, speed2, t_cpa)\n",
    "    bearings.append(b)\n",
    "    ranges.append(r)\n",
    "    string_result.append(str(i) + \", \" + str(r) + \", \" + str(b) + \", \" + \"50\" + \", \" + str(speed2) + \", \" + str(h) + \", \" + \"0\\n\");\n",
    "    #print(string_result[i]);\n",
    "    \n",
    "    n = text_file.write(string_result[i])\n",
    "    i+=1\n",
    "    \n",
    "text_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_file = open(\"intruders.txt\", \"w\")\n",
    "\n",
    "bearings = [];\n",
    "ranges = [];\n",
    "\n",
    "string_result = [];\n",
    "string_result.append(\"# id, range [m], bearing [deg], altitude [m], speed [m/s], heading [deg], climb rate [m/s]\\n\");\n",
    "\n",
    "# bearing ta jep ne grade (nqs do ta ndryshosh, lexo komentin e fundit tek\n",
    "# file-i i funksionit.\n",
    "alpha = 180;\n",
    "i=1;\n",
    "n = text_file.write(string_result[0]);\n",
    "\n",
    "#print(\"ac1 = [0, 0, 0, 0;\\n\"\n",
    " #         + str(speed1*t) + \", 0, 0, \" + str(t) + \"];\\n\");\n",
    "    \n",
    "\n",
    "while(alpha <= alpha_max):\n",
    "    [b, r, h] = calc_scenario_params(alpha, H, speed1, speed2, t);\n",
    "    bearings.append(b);\n",
    "    ranges.append(r);\n",
    "    \n",
    "    string_result.append(str(i) + \", \" + str(r) + \", \" + str(b) + \", \" + \"50\" + \", \" + str(speed2) + \", \" + str(h) + \", \" + \"0\\n\");\n",
    "    #print(string_result[i]);\n",
    "    \n",
    "    n = text_file.write(string_result[i]);\n",
    "    i+=1;\n",
    "    alpha += alpha_step;\n",
    "\n",
    "text_file.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
